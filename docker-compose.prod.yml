version: '3.8'

services:
  # Application service for production
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: acquisitions-app-prod
    ports:
      - '${PORT:-3000}:3000'
    env_file:
      - '.env.production'
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
      # Optional: Mount custom config files
      - ./config:/app/config:ro
    networks:
      - acquisitions-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'node -e "const http=require(\"http\");http.get(\"http://localhost:3000/health\",(r)=>{process.exit(r.statusCode===200?0:1)}).on(\"error\",()=>process.exit(1))"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: acquisitions-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - acquisitions-network
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - nginx

  # Optional: Log aggregation service
  log-aggregator:
    image: fluentd:latest
    container_name: acquisitions-logs
    volumes:
      - ./logs:/fluentd/log
      - ./fluent.conf:/fluentd/etc/fluent.conf
    networks:
      - acquisitions-network
    profiles:
      - logging

networks:
  acquisitions-network:
    driver: bridge

volumes:
  app-logs:
    driver: local
